name: AWS Tokyo Healthcheck and EC2 Management
on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时执行一次
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1 # 设置AWS区域
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_Tokyo }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_Tokyo }}
  EC2_INSTANCE_ID: 'i-0e847507a4ed7e836' # EC2实例ID
  DOMAIN: 'tokyo.onemorething.pp.ua'
  CF_ZONE_ID: 1fa9774064820f53fe1733e37a19f721
  PORT: 1081
  PROXIED: 'false' # 是否开启Cloudflare代理，默认否
  CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }} # 从GitHub Secrets中获取API Token

jobs:
  ip_management:
    runs-on: ubuntu-latest
    steps:
    - name: Check Domain Connectivity
      id: check-connectivity
      run: |
        API_URL="https://v2.api-m.com/api/tcping?address=${{env.DOMAIN}}&port=${{env.PORT}}"
        response=$(curl -sL $API_URL)
        echo ${{ env.DOMAIN }} $response
        if [[ "$response" == *"200"* ]]; then
          echo "Domain ${{ env.DOMAIN }} is reachable."
          echo "REACHABLE=true" >> $GITHUB_ENV
        else
          echo "Domain ${{ env.DOMAIN }} is unreachable."
          echo "REACHABLE=false" >> $GITHUB_ENV
        fi

    - name: Checkout Repository
      if: env.REACHABLE == 'false'
      uses: actions/checkout@v2

    - name: Get Current EC2 Instance IP
      if: env.REACHABLE == 'false'
      id: get_current_ip
      run: |
        CURRENT_IP=$(aws ec2 describe-instances --region ${{ env.AWS_REGION }} --instance-ids ${{ env.EC2_INSTANCE_ID }} --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)
        echo "::set-output name=current_ip::$CURRENT_IP"
        echo "Current IP is $CURRENT_IP"

    - name: Reconfigure EC2 Instance Network
      if: env.REACHABLE == 'false'
      id: reconfig_ec2_network
      run: |
        # 注意：AWS EC2实例的网络配置与GCP不同，直接删除并重新添加公共IP可能需要停止和启动实例。
        while true; do
          aws ec2 stop-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --region ${{ env.AWS_REGION }}
          aws ec2 start-instances --instance-ids ${{ env.EC2_INSTANCE_ID }} --region ${{ env.AWS_REGION }}
          NEW_IP=$(aws ec2 describe-instances --region ${{ env.AWS_REGION }} --instance-ids ${{ env.EC2_INSTANCE_ID }} --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)
          echo "::set-output name=new_ip::$NEW_IP"
          echo "New IP is $NEW_IP"
          API_URL="https://v2.api-m.com/api/tcping?address=$NEW_IP&port=1081"
          response=$(curl -sL $API_URL)
          echo $NEW_IP $response
          if [[ "$response" == *"200"* ]]; then
            echo "$NEW_IP is able to Ping...OK"
            echo "NEW_IP=$NEW_IP" >> $GITHUB_ENV
            break
          fi
            echo "$NEW_IP is NOT able to Ping, EC2 Reconfiguring..."
            sleep 5
        done

    - name: Get Cloudflare DNS Record ID
      if: env.REACHABLE == 'false'
      run: |
        # 使用cURL调用Cloudflare API获取DNS记录ID
        DNS_RECORDS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records?name=${{ env.DOMAIN }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")
        DNS_ID=$(echo "${DNS_RECORDS}" | jq -r '.result[] | select(.name == "'${{ env.DOMAIN }}'") | .id')
        if [ -z "$DNS_ID" ]; then
          echo "No DNS record found for ${{ env.DOMAIN }}"
          exit 1
        else
          echo "DNS Record ID for ${{ env.DOMAIN }}: $DNS_ID"
          echo "DNS_ID=$DNS_ID" >> $GITHUB_ENV
        fi

    - name: Update DNS Record
      if: env.REACHABLE == 'false'
      run: |
        # 构建cURL请求命令，使用先前获取到的DNS_ID
        UPDATE_CMD=$(echo -n "{\"type\":\"A\",\"name\":\"${{ env.DOMAIN }}\",\"content\":\"$NEW_IP\",\"proxied\":${{ env.PROXIED }}}")
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data-raw "$UPDATE_CMD"

        # 检查响应状态
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")

        if [ "$RESPONSE" -eq 200 ]; then
          echo "DNS record updated successfully."
        else
          echo "Failed to update DNS record. Response code: $RESPONSE"
          exit 1
        fi

    - name: Log Summary
      if: always()
      run: |
        if [ "${{ env.REACHABLE }}" == 'true' ]; then
          echo "Summary: Domain was reachable. No action taken."
        elif [ -n "$NEW_IP" ]; then
          echo "Summary: DNS record updated to $NEW_IP after instance restart."
        else
          echo "Summary: Unexpected error occurred. No DNS update performed."
        fi
