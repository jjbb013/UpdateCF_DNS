name: GCP HK Check Connectivity and Update DNS

on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次
  workflow_dispatch:
  
jobs:
  check_ping_and_update_dns:
    runs-on: ubuntu-latest
    env:
      INSTANCE_ZONE: asia-east2-a
      INSTANCE_NAME: instance-hk
      DOMAIN_TO_PING: hk.nets.pp.ua
      PORT: 1081
      CLOUDFLARE_DOMAIN: hk.nets.pp.ua
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
    - name: Check Connectivity
      id: ping_check
      run: |
        PING_OUTPUT=$(curl -sL https://v2.api-m.com/api/tcping?address=${{ env.DOMAIN_TO_PING }}&port=${{ env.PORT }})
        if [[ $PING_OUTPUT == *"200"* ]]; then
          echo "Domain ${{ env.DOMAIN_TO_PING }} is pingable at $(date)"
          echo "::set-output name=pingable::true"
        else
          echo "Domain ${{ env.DOMAIN_TO_PING }} is NOT pingable at $(date)"
          echo "::set-output name=pingable::false"
        fi

    - name: Stop GCP VM if Not Pingable
      if: steps.ping_check.outputs.pingable == 'false'
      env:
        GCP_PROJECT: YOUR_GCP_PROJECT # 替换为您的GCP项目ID
      run: |
        echo "${{ env.GCP_SA_KEY }}" > key.json
        gcloud auth activate-service-account --key-file key.json
        gcloud config set project ${{ env.GCP_PROJECT }}
        gcloud compute instances stop ${{ env.INSTANCE_NAME }} --zone ${{ env.INSTANCE_ZONE }}

    - name: Wait for VM to Stop
      if: steps.ping_check.outputs.pingable == 'false'
      run: |
        echo "Waiting for instance to stop..."
        # 实际上，您可能需要实现一个循环来等待实例完全停止，这里只是一个示意
        sleep 60

    - name: Start GCP VM
      if: steps.ping_check.outputs.pingable == 'false'
      env:
        GCP_PROJECT: YOUR_GCP_PROJECT # 替换为您的GCP项目ID
      run: |
        gcloud compute instances start ${{ env.INSTANCE_NAME }} --zone ${{ env.INSTANCE_ZONE }}

    - name: Wait for VM to Start
      if: steps.ping_check.outputs.pingable == 'false'
      run: |
        echo "Waiting for instance to start..."
        # 实际上，您可能需要实现一个循环来等待实例完全启动，这里只是一个示意
        sleep 120

    - name: Get VM External IP
      if: steps.ping_check.outputs.pingable == 'false'
      env:
        GCP_PROJECT: YOUR_GCP_PROJECT # 替换为您的GCP项目ID
      run: |
        EXTERNAL_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone ${{ env.INSTANCE_ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "Instance external IP: $EXTERNAL_IP"
        echo "NEW_IP=$EXTERNAL_IP" >> $GITHUB_ENV

    - name: Update Cloudflare DNS Record
      if: steps.ping_check.outputs.pingable == 'false' && env.NEW_IP
      run: |
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records/hkdns" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data "{\"type\":\"A\",\"name\":\"${{ env.CLOUDFLARE_DOMAIN }}\",\"content\":\"${{ env.NEW_IP }}\",\"ttl\":120}"

    - name: Log Results
      if: always()
      run: |
        if [[ ${{ steps.ping_check.outputs.pingable }} == 'true' ]]; then
          echo "Logged: Domain is pingable. No further action taken."
        else
          echo "Logged: DNS record updated to ${{ env.NEW_IP }} after instance restart."
        fi
