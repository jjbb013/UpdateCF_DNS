name: GCP HK Check Connectivity and Update DNS

on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次
  workflow_dispatch:

jobs:
  monitor_dns:
    runs-on: ubuntu-latest
    env:
      TARGET_DOMAIN: 'hk.nets.pp.ua'
      TARGET_PORT: 1081
      GCP_VM_ZONE: 'asia-east2-a'
      GCP_VM_NAME: 'instance-hk'
      CLOUDFLARE_DOMAIN: 'hk.nets.pp.ua'
      CLOUDFLARE_ZONE_ID: b2fc014bf87f67714afb1b9c10941a2e
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    steps:
    - name: Check Domain Connectivity
      id: check-connectivity
      run: |
        # 使用curl获取ping结果
        API_URL="https://v2.api-m.com/api/tcping?address=${{env.TARGET_DOMAIN}}&port=1081"
        response=$(curl -sL $API_URL)
        echo ${{ env.TARGET_DOMAIN }} $response
        if [ "$ping_result" == *"200"* ]]; then
          echo "Domain is reachable."
          echo "REACHABLE=true" >> $GITHUB_ENV
        else
          echo "Domain is unreachable."
          echo "REACHABLE=false" >> $GITHUB_ENV
        fi

    - name: Handle Unreachable Domain
      if: env.REACHABLE == 'false'
      env:
        GCP_PROJECT_ID: infra-falcon-424407-c7
      run: |
        echo "${{ env.GCP_SA_KEY }}" | base64 --decode > sa-key.json
        gcloud auth activate-service-account --key-file sa-key.json --project ${{ env.GCP_PROJECT_ID }}
        gcloud compute instances stop ${{ env.GCP_VM_NAME }} --zone ${{ env.GCP_VM_ZONE }}

        # 等待实例停止，这里以简单延时代替实际的检查逻辑
        sleep 60

        gcloud compute instances start ${{ env.GCP_VM_NAME }} --zone ${{ env.GCP_VM_ZONE }}

        # 等待实例启动，同样以延时代替实际检查
        sleep 120

        # 获取实例公网IP
        instance_ip=$(gcloud compute instances describe ${{ env.GCP_VM_NAME }} --zone ${{ env.GCP_VM_ZONE }} --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "INSTANCE_IP=$instance_ip" >> $GITHUB_ENV

    - name: Update Cloudflare DNS
      if: env.REACHABLE == 'false' && env.INSTANCE_IP
      run: |
        # 使用Cloudflare API更新DNS记录
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/dns_records" \
          -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data "{\"type\":\"A\",\"name\":\"${{ env.CLOUDFLARE_DOMAIN }}\",\"content\":\"${{ env.INSTANCE_IP }}\",\"ttl\":120}" \
          --fail

    - name: Log Summary
      if: always()
      run: |
        if [ "${{ env.REACHABLE }}" == 'true' ]; then
          echo "Summary: Domain was reachable. No action taken."
        elif [ -n "${{ env.INSTANCE_IP }}" ]; then
          echo "Summary: DNS record updated to ${{ env.INSTANCE_IP }} after instance restart."
        else
          echo "Summary: Unexpected error occurred. No DNS update performed."
        fi

    - name: Clean Up
      if: env.REACHABLE != 'true'
      run: |
        rm sa-key.json # 清除服务账户密钥文件，出于安全考虑
