name: IP Management Pro

on:
  schedule:
    - cron: '0 */3 * * *' # 每3小时运行一次
  workflow_dispatch:

env:
  GCP_PROJECT_ID: skillful-cider-440305-d7
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY_025 }}
  CF_ZONE_ID: 1fa9774064820f53fe1733e37a19f721
  PORT: 1081
  PROXIED: 'false'
  CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

jobs:
  read_config:
    runs-on: ubuntu-latest
    outputs:
      server_list: ${{ steps.set-server-list.outputs.server_list }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Read and Parse Server Config
      id: set-server-list
      run: |
        server_list=$(yq e '.servers' servers.yaml)
        if [ -z "$server_list" ]; then
          echo "Error: Server list is empty or invalid."
          exit 1
        fi
        # 验证 JSON 格式
        if ! echo "$server_list" | jq . > /dev/null; then
          echo "Error: Server list is not valid JSON."
          exit 1
        fi
        # 解析服务器列表并设置环境变量
        echo "$server_list" | jq -c '.[]' | while read server; do
          domain=$(echo "$server" | jq -r '.domain')
          gcp_vm_name=$(echo "$server" | jq -r '.gcp_vm_name')
          gcp_vm_zone=$(echo "$server" | jq -r '.gcp_vm_zone')
          gcp_region=$(echo "$server" | jq -r '.gcp_region')
          echo "DOMAIN=$domain" >> $GITHUB_ENV
          echo "GCP_VM_NAME=$gcp_vm_name" >> $GITHUB_ENV
          echo "GCP_VM_ZONE=$gcp_vm_zone" >> $GITHUB_ENV
          echo "GCP_REGION=$gcp_region" >> $GITHUB_ENV
        done

  ip_management:
    needs: read_config
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server: ${{ fromJson(needs.read_config.outputs.server_list) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Debug Output
      run: |
        echo "Server list from read_config: ${{ needs.read_config.outputs.server_list }}"
        if [ -z "${{ needs.read_config.outputs.server_list }}" ]; then
          echo "Error: Server list is empty or invalid."
          exit 1
        fi
        parsed_server_list=$(echo "${{ needs.read_config.outputs.server_list }}" | jq .)
        echo "Parsed server list: $parsed_server_list"
        if [ -z "$parsed_server_list" ]; then
          echo "Error: Parsed server list is empty or invalid."
          exit 1
        fi

    - name: Load Server Config
      id: load-server-config
      run: |
        echo "DOMAIN=${{ matrix.server.domain }}" >> $GITHUB_ENV
        echo "GCP_VM_NAME=${{ matrix.server.gcp_vm_name }}" >> $GITHUB_ENV
        echo "GCP_VM_ZONE=${{ matrix.server.gcp_vm_zone }}" >> $GITHUB_ENV
        echo "GCP_REGION=${{ matrix.server.gcp_region }}" >> $GITHUB_ENV

    - name: Check Domain Connectivity
      id: check-connectivity
      run: |
        API_URL="https://api.jaxing.cc/v2/Tcping?host=${{ env.DOMAIN }}&port=${{ env.PORT }}"
        response=$(curl -sL $API_URL)
        echo "Response for domain ${{ env.DOMAIN }}: $response"
        if [[ $response == *'"msg":"请求成功"'* ]] && ! echo "$response" | grep -q '"dial tcp'; then
          echo "Domain ${{ env.DOMAIN }} is reachable."
          echo "REACHABLE=true" >> $GITHUB_ENV
        else
          echo "Domain ${{ env.DOMAIN }} is unreachable."
          echo "REACHABLE=false" >> $GITHUB_ENV
        fi

    - name: Authentication
      id: auth
      if: env.REACHABLE == 'false'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ env.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      if: env.REACHABLE == 'false'
      uses: google-github-actions/setup-gcloud@v2

    - name: Use gcloud CLI
      if: env.REACHABLE == 'false'
      run: gcloud info

    - name: Get Current VM External IP
      if: env.REACHABLE == 'false'
      id: get_current_ip
      run: |
        CURRENT_IP=$(gcloud compute instances describe ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_VM_ZONE }} --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "Current IP is $CURRENT_IP"
        echo "CURRENT_IP=$CURRENT_IP" >> $GITHUB_ENV

    - name: Reconfig VM and Test IP
      if: env.REACHABLE == 'false'
      id: reconfig_vm_and_test_ip
      run: |
        retry_count=0
        max_retries=5
        vm_name=${{ env.GCP_VM_NAME }}
        vm_zone=${{ env.GCP_VM_ZONE }}
        region=${{ env.GCP_REGION }}
        static_ips=()
        while (( retry_count < max_retries )); do
            CURRENT_IP=$(gcloud compute instances describe $vm_name --zone=$vm_zone --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
            CURRENT_ACCESS_CONFIG_NAME=$(gcloud compute instances describe "$vm_name" --zone="$vm_zone" --format='value(networkInterfaces[0].accessConfigs[0].name)')
            STATIC_IP_NAME="${vm_name}$(printf "%02d" $((retry_count + 1)))"
            gcloud compute addresses create $STATIC_IP_NAME --addresses=$CURRENT_IP --region=$region
            static_ips+=("$STATIC_IP_NAME")
            gcloud compute instances delete-access-config $vm_name --zone=$vm_zone --access-config-name=$CURRENT_ACCESS_CONFIG_NAME
            gcloud compute instances add-access-config $vm_name --zone=$vm_zone
            NEW_IP=$(gcloud compute instances describe $vm_name --zone=$vm_zone --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
            API_URL="https://api.jaxing.cc/v2/Tcping?host=$NEW_IP&port=${{ env.PORT }}"
            response=$(curl -sL "$API_URL")
            if [[ $response == *'"msg":"请求成功"'* ]] && ! echo "$response" | grep -q '"dial tcp'; then
                echo "New IP $NEW_IP is reachable, proceeding with the rest of the process."
                echo "NEW_IP=$NEW_IP" >> $GITHUB_ENV
                break
            else
                echo "New IP $NEW_IP is not reachable, retrying..."
                ((retry_count+=1))
                sleep 5
            fi
        done
        if [ $retry_count -eq $max_retries ]; then
            echo "Reached maximum retries, unable to configure VM."
        else
            echo "VM is now using a reachable IP: $NEW_IP"
        fi
        for STATIC_IP in "${static_ips[@]}"; do
            gcloud compute addresses delete $STATIC_IP --region=$region
        done

    - name: Get Cloudflare DNS Record ID
      if: env.REACHABLE == 'false'
      run: |
        DNS_RECORDS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records?name=${{ env.DOMAIN }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")
        DNS_ID=$(echo "${DNS_RECORDS}" | jq -r '.result[] | select(.name == "${{ env.DOMAIN }}") | .id')
        if [ -z "$DNS_ID" ]; then
          echo "No DNS record found for ${{ env.DOMAIN }}"
          exit 1
        else
          echo "DNS Record ID for ${{ env.DOMAIN }}: $DNS_ID"
          echo "DNS_ID=$DNS_ID" >> $GITHUB_ENV
        fi
    - name: Update DNS Record
      if: env.REACHABLE == 'false'
      run: |
        UPDATE_CMD=$(echo -n "{\"type\":\"A\",\"name\":\"${{ env.DOMAIN }}\",\"content\":\"$NEW_IP\",\"proxied\":${{ env.PROXIED }}}")
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data-raw "$UPDATE_CMD"
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")
        if [ "$RESPONSE" -eq 200 ]; then
          echo "DNS record updated successfully."
        else
          echo "Failed to update DNS record. Response code: $RESPONSE"
          exit 1
        fi

    - name: Log Summary
      if: always()
      run: |
        if [ "${{ env.REACHABLE }}" == 'true' ]; then
          echo "Summary: Domain was reachable. No action taken."
        elif [ -n "$NEW_IP" ]; then
          echo "Summary: DNS record updated to $NEW_IP after instance reconfiguration."
        else
          echo "Summary: Unexpected error occurred. No DNS update performed."
        fi
