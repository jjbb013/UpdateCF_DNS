name: 测试GCP利用静态IP更新服务器IP

on:
  workflow_dispatch:

env:
  GCP_PROJECT_ID: sturdy-yen-432600-k2
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY_025 }}
  GCP_VM_ZONE: 'asia-south1-c'
  GCP_VM_NAME: 'instance-india'
  GCP_REGION: 'asia-south1'
  DOMAIN: 'gcp.india.onemorething.pp.ua'
  CF_ZONE_ID: b2fc014bf87f67714afb1b9c10941a2e
  PORT: 1081
  PROXIED: 'false' # 是否开启Cloudflare代理，默认否
  CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }} # 从GitHub Secrets中获取API Token

jobs:
  ip_management:
    runs-on: ubuntu-latest
    steps:
    - name: Check Domain Connectivity
      id: check-connectivity
      run: |
        # 使用curl获取ping结果
        API_URL="https://v2.api-m.com/api/tcping?address=${{env.DOMAIN}}&port=${{env.PORT}}"
        response=$(curl -sL $API_URL)
        echo ${{ env.DOMAIN }} $response
        if [[ "$response" == *"200"* ]]; then
          echo "Domain $Domain is reachable."
          echo "REACHABLE=true" >> $GITHUB_ENV
        else
          echo "Domain $Domain is unreachable."
          echo "REACHABLE=false" >> $GITHUB_ENV
        fi
        
    - name: Checkout Repository
      if: env.REACHABLE == 'false'
      uses: actions/checkout@v2
  
    - name: Authentication
      id: 'auth'
      if: env.REACHABLE == 'false'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ env.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      if: env.REACHABLE == 'false'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Use gcloud CLI'
      if: env.REACHABLE == 'false'
      run: 'gcloud info'

    - name: Setup Google Cloud SDK
      if: env.REACHABLE == 'false'
      uses: google-github-actions/setup-gcloud@v2.1.0
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ env.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get Current VM External IP
      if: env.REACHABLE == 'false'
      id: get_current_ip
      run: |
        CURRENT_IP=$(gcloud compute instances describe ${{ env.GCP_VM_NAME }} --zone=${{ env.GCP_VM_ZONE }} --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
        echo "::set-output name=current_ip::$CURRENT_IP"
        echo "Current IP is $CURRENT_IP"
        
    - name: Reconfig VM and Test IP
      if: env.REACHABLE == 'false'
      id: reconfig_vm_and_test_ip
      run: |
        retry_count=0
        max_retries=3
        vm_name=${{ env.GCP_VM_NAME }}
        vm_zone=${{ env.GCP_VM_ZONE }}
        region=${{ env.GCP_REGION }}

        while (( retry_count < max_retries )); do
            # Step 1: Promote to static and name it
            CURRENT_IP=$(gcloud compute instances describe $vm_name --zone=$vm_zone --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
            CURRENT_ACCESS_CONFIG_NAME=$(gcloud compute instances describe "${GCP_VM_NAME}" --zone="${GCP_VM_ZONE}" --format 'value[separator=": "](networkInterfaces[0].accessConfigs[0].name)')
            STATIC_IP_NAME="${vm_name}$(printf "%02d" $((retry_count + 1)))"
            gcloud compute addresses create $STATIC_IP_NAME --addresses=$CURRENT_IP --region=$region

        
            # Step 2: Remove the static IP from the VM
            gcloud compute instances delete-access-config $vm_name --zone=$vm_zone --access-config-name=$CURRENT_ACCESS_CONFIG_NAME

        
            # Step 3: Get new IP and test
            gcloud compute instances add-access-config $vm_name --zone=$vm_zone
            NEW_IP=$(gcloud compute instances describe $vm_name --zone=$vm_zone --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
            API_URL="https://v2.api-m.com/api/tcping?address=$NEW_IP&port=1081"
            response=$(curl -sL "$API_URL")
        
            if [[ "$response" == *"200"* ]]; then
                echo "New IP $NEW_IP is reachable, proceeding with the rest of the process."
                echo "NEW_IP=$NEW_IP" >> $GITHUB_ENV
                break
            else
                echo "New IP $NEW_IP is not reachable, retrying..."
                ((retry_count+=1))
                sleep 5
            fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
            echo "Reached maximum retries, unable to configure VM."
        else
            # Step 5: Record and output the current IP
            echo "VM is now using a reachable IP: $NEW_IP"
        fi
        
        # Step 6: Release all created static IPs
        for i in $(seq 1 $retry_count); do
            STATIC_IP_NAME="${vm_name}$(printf "%02d" $i)"
            gcloud compute addresses delete $STATIC_IP_NAME --region=$region
        done

    - name: Update DNS Record
      if: env.REACHABLE == 'false'
      run: |
        # 构建cURL请求命令，使用先前获取到的DNS_ID
        UPDATE_CMD=$(echo -n "{\"type\":\"A\",\"name\":\"${{ env.DOMAIN }}\",\"content\":\"$NEW_IP\",\"proxied\":${{ env.PROXIED }}}")
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data-raw "$UPDATE_CMD"

        # 检查响应状态
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")

        if [ "$RESPONSE" -eq 200 ]; then
          echo "DNS record updated successfully."
        else
          echo "Failed to update DNS record. Response code: $RESPONSE"
          exit 1
        fi

    - name: Log Summary
      if: always()
      run: |
        if [ "${{ env.REACHABLE }}" == 'true' ]; then
          echo "Summary: Domain was reachable. No action taken."
        elif [ -n "$NEW_IP" ]; then
          echo "Summary: DNS record updated to $NEW_IP after instance restart."
        else
          echo "Summary: Unexpected error occurred. No DNS update performed."
        fi

         
