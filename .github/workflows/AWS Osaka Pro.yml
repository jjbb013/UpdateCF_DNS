name: AWS Osaka Pro
on:
  schedule:
    - cron: '0 */2 * * *' # 每2小时执行一次
  workflow_dispatch:

env:
  INSTANCE_ID: i-01636fd58d539173b
  REGION: ap-northeast-3
  DOMAIN: 'osaka.onemorething.pp.ua' # 需要查询的DNS名称
  CF_ZONE_ID: 1fa9774064820f53fe1733e37a19f721
  CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }} # 从GitHub Secrets中获取API Token
  PROXIED: 'false' # 是否开启Cloudflare代理，默认否
  MAX_RETRIES: 5

jobs:
  healthcheck_and_manage_ec2:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_Osaka }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_Osaka }}
        aws-region: ${{ env.REGION }}
        
    - name: Check Current IP and Connectivity
      id: check_ip
      run: |
        CURRENT_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "Current Public IP: $CURRENT_IP"
        echo "CURRENT_IP=$CURRENT_IP" >> $GITHUB_ENV

        API_URL="https://v2.api-m.com/api/tcping?address=${{ env.CURRENT_IP }}&port=1081"
        response=$(curl -sL $API_URL)
        echo "$CURRENT_IP $response"
        
        if [[ $response == *"200"* ]]; then
          echo "Current IP is pingable at $(date)"
          echo "::set-output name=pingable::true"
        else
          echo "Current IP is NOT pingable at $(date)"
          echo "::set-output name=pingable::false"
        fi

    - name: Restart EC2 Instance
      if: steps.check_ip.outputs.pingable == 'false'
      run: |
        echo "Restarting EC2 instance..."
        aws ec2 reboot-instances --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }}
        echo "Waiting for instance to reboot..."
        aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }}
      
    - name: Retry Connectivity Check
      id: retry_connectivity
      run: |
        for (( i=1; i<=${{ env.MAX_RETRIES }}; i++ )); do
          CURRENT_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "Retry $i: Checking new IP $CURRENT_IP..."
          
          API_URL="https://v2.api-m.com/api/tcping?address=${{ env.CURRENT_IP }}&port=1081"
          response=$(curl -sL $API_URL)
          echo "$CURRENT_IP $response"

          if [[ $response == *"200"* ]]; then
            echo "New IP is pingable at $(date)"
            echo "NEW_IP=$CURRENT_IP" >> $GITHUB_ENV
            echo "::set-output name=pingable::true"
            break
          else
            echo "New IP is NOT pingable at attempt $i."
            if [ $i -lt ${{ env.MAX_RETRIES }} ]; then
              echo "Restarting EC2 instance again..."
              aws ec2 reboot-instances --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }}
              aws ec2 wait instance-status-ok --instance-ids ${{ env.INSTANCE_ID }} --region ${{ env.REGION }}
            fi
          fi

          sleep 5 # 等待一段时间再重试
        done

        if [[ $response != *"200"* ]]; then
          echo "All attempts failed. No valid IP found."
          exit 1
        fi

    - name: Get Cloudflare DNS Record ID
      if: steps.retry_connectivity.outputs.pingable == 'true'
      run: |
        # 使用cURL调用Cloudflare API获取DNS记录ID
        DNS_RECORDS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records?name=${{ env.DOMAIN }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")
        DNS_ID=$(echo "${DNS_RECORDS}" | jq -r '.result[] | select(.name == "'${{ env.DOMAIN }}'") | .id')
        
        if [ -z "$DNS_ID" ]; then
          echo "No DNS record found for ${{ env.DOMAIN }}"
          exit 1
        else
          echo "DNS Record ID for ${{ env.DOMAIN }}: $DNS_ID"
          echo "DNS_ID=$DNS_ID" >> $GITHUB_ENV
        fi

    - name: Update DNS Record
      if: steps.retry_connectivity.outputs.pingable == 'true'
      run: |
        NEW_IP=${{ env.NEW_IP }}
        echo "Updating DNS record with new IP..."
        UPDATE_CMD=$(echo -n "{\"type\":\"A\",\"name\":\"${{ env.DOMAIN }}\",\"content\":\"$NEW_IP\",\"proxied\":${{ env.PROXIED }}}")
        curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data-raw "$UPDATE_CMD"

        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://api.cloudflare.com/client/v4/zones/${{ env.CF_ZONE_ID }}/dns_records/${{ env.DNS_ID }}" \
          -H "Authorization: Bearer ${{ env.CF_API_TOKEN }}" \
          -H "Content-Type: application/json")

        if [ "$RESPONSE" -eq 200 ]; then
          echo "DNS record updated successfully."
        else
          echo "Failed to update DNS record. Response code: $RESPONSE"
          exit 1
        fi
